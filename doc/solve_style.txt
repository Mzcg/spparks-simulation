"SPPARKS WWW Site"_sws - "SPPARKS Documentation"_sd - "SPPARKS Commands"_sc :c

:link(sws,http://www.cs.sandia.gov/~sjplimp/spparks.html)
:link(sd,Manual.html)
:link(sc,Section_commands.html#comm)

:line

solve_style command :h3

[Syntax:]

solve_style style args :pre

style = {linear} or {tree} or {group}
{linear} args = seed
  seed = random number seed (positive integer)
{tree} args = seed
  seed = random number seed (positive integer)
{group} args = lo hi (ngroups) seed 
  lo,hi = range of propensities
  ngroups = # of groups to use (optional parameter)
  seed = random number seed (positive integer)

[Examples:]

solve_style linear seed
solve_style tree seed
solve_style group lo hi seed
solve_style group lo hi ngroups seed :pre

[Description:]

Choose a kinetic Monte Carlo (KMC) solver to use in your
"application"_app_style.html.  If no "sweeper"_sweep_style.html is
used then a solver is required.  If a sweeper with the KMC option is
used, then a solver is also required.

A KMC solver picks events for your application to perform from a list
of events and their associated probabilities.  It does this using the
standard "Gillespie"_#Gillespie or "BKL"_#BKL algorithm which also
computes a timestep for the chosen event to occur at.  The only
difference between the various solver styles are their speed and
scalability as a function of the number of events they choose from.
The linear solver may be suitable for simulations with few events; the
tree or group solver should be used for larger simulations.

The {linear} style chooses an event by scanning the list of events in
a linear fashion.  Hence the cost to pick an event scales as O(N),
where N is the number of events to choose from.

The {tree} style chooses an event by creating a binary tree of
probabilities and their sums, as in the "Gibson/Bruck"_#Gibson
implementation of the Gillespie algorithm.  It's cost to pick an
event scales as O(logN).

The {group} style chooses an event using the composition and rejection
(CR) algorithm described originally in "Devries"_#Devries and
described concisely in "Slepoy"_#Slepoy.  It's cost to pick an event
scales as O(1) as it is a constant time algorithm.  It requires that
you bound the lo and hi probabilities for any event.  By default, if
no {ngroups} arg is listed or it is specified as 0, then the number of
groups between lo and hi, then the group boundaries cascade in powers
of 2 from lo to hi.  I.e. the first group is from lo to 2*lo, the
second group is from 2*lo to 4*lo, etc.  Note that for hi/lo = 1.0e6,
there would be about 20 groups.

[Restrictions:] none

[Related commands:]

"app_style"_app_style.html, "sweep_style"_sweep_style.html

[Default:] none

:line

Gillespie

BKL

Devries

Slepoy
