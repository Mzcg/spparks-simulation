"SPPARKS WWW Site"_sws - "SPPARKS Documentation"_sd - "SPPARKS Commands"_sc :c

:link(sws,http://www.cs.sandia.gov/~sjplimp/spparks.html)
:link(sd,Manual.html)
:link(sc,Section_commands.html#comm)

:line

app_style ising command :h3
app_style ising/2d/4n command :h3
app_style ising/2d/4n/exchange command :h3
app_style ising/2d/8n command :h3
app_style ising/3d/6n command :h3
app_style ising/3d/26n command :h3

[Syntax:]

app_style style args keyword values ... :pre

style = {ising} or {ising/2d/4n} or {ising/2d/4n/exchange} or {ising/2d/8n} or {ising/3d/6n} or {ising/3d/26n} :ulb,l
  {ising} arg = seed 
    seed = random number seed (positive integer)
  {ising/2d/4n} args = Nx Ny seed
  {ising/2d/4n/exchange} args = Nx Ny seed
  {ising/2d/8n} args = Nx Ny seed
  {ising/3d/6n} args = Nx Ny Nz seed
  {ising/3d/26n} args = Nx Ny Nz seed
    Nx,Ny = size of 2d lattice size
    Nx,Ny,Nz = size of 3d lattice size
    seed = random number seed (positive integer) :pre
see the "app_style"_app_style.html command for additional keywords that can be appended to the {ising} and {ising/exchange} styles :l,ule

[Examples:]

app_style ising 18874 lattice sq/4n 1.0 50 50
app_style ising/2d/4n 50 50 18874
app_style ising/2d/4n/exchange 50 50 18874
app_style ising/2d/8n 100 100 48783
app_style ising/3d/6n 100 100 100 887287
app_style ising/3d/26n 50 50 100 487827 :pre

[Description:]

These applications evolve a 2-state Ising model, where each lattice
site has a spin of 1 or 2.  Sites flip their spin as the model
evolves.

The Hamiltonian representing the energy of site I is as follows:

H = - Sum_j delta_ij :pre

where Sum_j is a sum over all the neighbor sites of site I and delta_ij
is 1 if the spin of sites I and J are the same and 0 otherwise.

These Ising models can be run in one of several modes, either as a
general lattice application or as a 2d square lattice application or
as a 3d square lattice application.  See the
"app_style"_app_style.html commmand for further discussion.  When
running as a general lattice application, the lattice is specified by
the appended {lattice} keword with its associated values, as discussed
on the doc page for the "app_style"_app_style.html command.  When run
as a 2d or 3d lattice application the style name also determines how
many neighbors per site are defined:

2d/4n = 2d square lattice with 4 neighbors per site (nearest neighbors)
2d/8n = 2d square lattice with 8 neighbors per site (1st and 2nd nearest neighbors)
3d/6n = 3d cubic lattice with 6 neighbors per site (nearest neighbors)
3d/26n = 3d cubic lattice with 26 neighbors per site (1st,2nd,3rd nearest neighbors) :ul

All the Ising applications except those with "exchange" in the style
name perform Glauber dynamics, meaning they flip the spin on a single
site.  The applications with "exchange" in the style name perform
Kawasaki dynamics, meaning the spins on two neighboring sites are
swapped.

As explained on "this page"_app_style.html, these applications can be
evolved by either a kinetic Monte Carlo (KMC) or Metropolis
rejection-based algorithm.  You must thus define a sweeping method
and/or KMC solver to be used with the application via the
"sweep_style"_sweep_style.html and "solve_style"_solve_style.html
commands.

For the Glauber dynamics applications with solution by a KMC
algorithm, a site event is a spin flip and its probability is
min\[1,exp(-dE/kT)\], where dE = Efinal - Einitial using the
Hamiltonian defined above for the energy of the site, and T is the
temperature of the system defined by the
"temperature"_temperature.html command (which includes the Boltzmann
constant k implicitly).

For the Glauber dynamics applications with solution by a Metropolis
algorithm, the spin is set randomly to 1 or 2 and dE = Efinal -
Einitial is calculated, as is a uniform random number R between 0 and
1.  The new state is accepted if R < min\[1,exp(-dE/kT)\].

For the Kawasaki dynamics applications with solution by a KMC
algorithm, the possible events a site can perform are swaps with any
neighbor site with a spin different than itself.  The probability of
each such event is min\[1,exp(-dE/kT)\], where dE = Efinal - Einitial
and E is the sum of the energy for the site and its neighbor.

For the Kawasaki dynamics applications with solution by a Metropolis
algorithm, the spin is flipped to its opposite state and dE = Efinal -
Einitial is calculated, as is a uniform random number R between 0 and
1.  The flip is accepted if R < min\[1,exp(-dE/kT)\], else it is
rejected.

There are no additional commands defined by these applications.

[Restrictions:] none

[Related commands:]

"app_style potts"_app_potts.html

[Default:] none
