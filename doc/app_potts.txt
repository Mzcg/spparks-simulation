"SPPARKS WWW Site"_sws - "SPPARKS Documentation"_sd - "SPPARKS Commands"_sc :c

:link(sws,http://www.cs.sandia.gov/~sjplimp/spparks.html)
:link(sd,Manual.html)
:link(sc,Section_commands.html#comm)

:line

app_style potts command :h3
app_style potts/variable command :h3

[Syntax:]

app_style style Q rejectstyle seed keyword values ... :pre

style = {potts} or {potts/variable}
Q = number of spin states
rejectstyle = {spin} or {neigh} or {neighonly}
seed = random number seed (positive integer)
see the "app_style"_app_style.html command for additional keywords that can be appended to the {potts} and {potts/variable} styles :ul

[Examples:]

app_style potts 20 spin 18874 lattice sq/4n 1.0 50 50
app_style potts/variable 20 neigh 18874 lattice sq/4n 1.0 50 50 site 1 1 :pre

[Description:]

These applications evolve a Q-state Ising model or Potts model, where
each lattice site has a spin value from 1 to Q.  Sites flip their spin
as the model evolves.

The Hamiltonian representing the energy of site I is as follows:

H = - Sum_j delta_ij :pre

where Sum_j is a sum over all the neighbor sites of site I and delta_ij
is 1 if the spin of sites I and J are the same and 0 otherwise.

These applications perform Glauber dynamics, meaning the spin is
flipped on a single site.  See "app_style diffusion" for an Ising
model which performs Kawasaki dynamics, meaning the spins on two
neighboring sites are swapped.

The {potts/variable} application is identical to the {potts}
application except that the {site} keyword (described with the
"app_style"_app_style.html command) can be used to define multiple
quantities per site, instead of just a single spin value.

As explained on "this page"_app_style.html, this application can be
evolved by either a kinetic Monte Carlo (KMC) or Metropolis
rejection-based algorithm.  You must thus define a rejection method or
KMC solver to be used with the application via the
"reject_style"_sweep_style.html and "solve_style"_solve_style.html
commands.

For solution by a KMC algorithm, a site event is a spin flip and its
probability is min\[1,exp(-dE/kT)\], where dE = Efinal - Einitial
using the Hamiltonian defined above for the energy of the site, and T
is the temperature of the system defined by the
"temperature"_temperature.html command (which includes the Boltzmann
constant k implicitly).

For solution by a rejection KMC (rKMC) algorithm, the spin is set
randomly to 1 or 2 and dE = Efinal - Einitial is calculated, as is a
uniform random number R between 0 and 1.  The new state is accepted if
R < min\[1,exp(-dE/kT)\].



As explained on "this page"_app_style.html, these applications can be
evolved by either a kinetic Monte Carlo (KMC) or Metropolis
rejection-based algorithm.  You must thus define a sweeping method
and/or KMC solver to be used with the application via the
"sweep_style"_sweep_style.html and "solve_style"_solve_style.html
commands.

For solution by a KMC algorithm, a site event is a spin flip to a spin
value of a neighbor site different than itself.  For example, let a
site have 12 neighbors and those 12 spins have 4 different values, one
of which is the same as the central site.  There will then be 3 events
defined for the central site.  The probability of each event is
min\[1,exp(-dE/kT)\], where dE = Efinal - Einitial using the
Hamiltonian defined above for the energy of the site, and T is the
temperature of the system defined by the
"temperature"_temperature.html command (which includes the Boltzmann
constant k implicitly).

For solution by a Metropolis algorithm, the spin is set to a random
value between 1 and Q, dE = Efinal - Einitial is calculated, as is a
uniform random number R between 0 and 1.  The new state is accepted if
R < min\[1,exp(-dE/kT)\], else it is rejected.

:line

The following additional commands are defined by these applications:

"dump"_dump.html : output of lattice snapshots
"stats"_stats.html : output of system info
"temperature"_temperature.html : set Monte Carlo temperature :tb(s=:)

[Restrictions:] none

[Related commands:]

"app_style ising"_app_ising.html

[Default:] none
