"SPPARKS WWW Site"_sws - "SPPARKS Documentation"_sd - "SPPARKS Commands"_sc :c

:link(sws,http://www.cs.sandia.gov/~sjplimp/spparks.html)
:link(sd,Manual.html)
:link(sc,Section_commands.html#comm)

:line

app_style diffusion command :h3

[Syntax:]

app_style diffusion fraction seed keyword values ... :pre

diffusion = application style name
fraction = fraction of sites to occupy initially
seed = random number seed (positive integer)
see the "app_style"_app_style.html command for additional keywords that can be appended :ul

[Examples:]

app_style diffusion 0.2 18874 lattice tri 1.0 50 50 :pre

[Description:]

This application performs diffusive hops on a lattice that is
partially occupied and partially unoccupied (vacant sites).  Thus it
can be used to model surface diffusion on a 2d lattice or bulk
diffusion on a 3d lattice.  It is equivalent to a 2-state Ising model
performing Kawasaki dynamics, where each lattice site has a spin of 1
or 2.  Neighboring sites exchange their spins as the model evolves.

The Hamiltonian representing the energy of site I is as follows:

H = - Sum_j delta_ij :pre

where Sum_j is a sum over all the neighbor sites of site I and
delta_ij is 1 if the spin of sites I and J are the same and 0
otherwise.

These is a general lattice application; see the
"app_style"_app_style.html commmand for further discussion.  The
lattice must be specified by the appended {lattice} keword with its
associated values, as discussed on the doc page for the
"app_style"_app_style.html command.

This application performs Kawasaki dynamics, meaning the spins on two
neighboring sites are swapped or equivalently an atom hops from an
occupied site to a vacancy site.

As explained on "this page"_app_style.html, these applications can be
evolved by either a kinetic Monte Carlo (KMC) or Metropolis
rejection-based algorithm.  You must thus define a sweeping method
and/or KMC solver to be used with the application via the
"sweep_style"_sweep_style.html and "solve_style"_solve_style.html
commands.

For solution by a KMC algorithm, the possible events a site can
perform are swaps with any neighbor site with a spin different than
itself.  The probability of each such event is min\[1,exp(-dE/kT)\],
where dE = Efinal - Einitial and E is the sum of the energy for the
site and its neighbor.

For solution by a Metropolis algorithm, the spin is flipped to its
opposite state and dE = Efinal - Einitial is calculated, as is a
uniform random number R between 0 and 1.  The flip is accepted if R <
min\[1,exp(-dE/kT)\], else it is rejected.

:line

The following additional commands are defined by this application:

"dump"_dump.html : output of lattice snapshots
"stats"_stats.html : output of system info
"temperature"_temperature.html : set Monte Carlo temperature :tb(s=:)

[Restrictions:] none

[Related commands:]

"app_style ising"_app_ising.html

[Default:] none
