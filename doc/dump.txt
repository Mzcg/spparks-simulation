"SPPARKS WWW Site"_sws - "SPPARKS Documentation"_sd - "SPPARKS Commands"_sc :c

:link(sws,http://www.cs.sandia.gov/~sjplimp/spparks.html)
:link(sd,Manual.html)
:link(sc,Section_commands.html#comm)

:line

dump command :h3

[Syntax:]

dump delta filename keyword values field1 field2 ... :pre

delta = time increment between dumps (seconds) :ulb,l
filename = name of file to dump snapshots to :l

zero or more keyword/value pairs may be appended :l
keyword = {delay} or {logfreq} or {mask} :l
  {delay} values = tdelay
    tdelay = delay dump until at least this time
  {logfreq} values = N factor
    N = number of repetitions per interval
    factor = scale factor between interval
  {mask} values = {yes} or {no}
    yes/no = suppress output of lattice sites with zero energy :pre

zero or more fields may be appended :l
field = {id} or {lattice} or {x} or {y} or {z} or {energy} or {propensity} or {iN} or {dN} :l,ule

[Examples:]

dump 0.25 tmp.dump
dump 5.0 snap.ising id lattice energy
dump 1.0 snap.lattice logfreq 9 10.0 id i1 i2 x y z :pre

[Description:]

Dump snapshots of the state of the lattice to a file at intervals of delta
during a simulation.  The quantities printed are obtained from
the application.  Only lattice-based applications support dumps since
what is output is one line per lattice site.

Using the {logfreq} keyword will produce statistical output at varying
intervals during the course of a simulation.  There will be {N}
outputs per interval where the size of each interval is initially
{delta} and then scales up by {factor} each time.

For example, this command

dump 0.1 snap.lattice logfreq 7 10.0 id i1 i2 x y z :pre

will dump snapshots at these times:

t = 0, 0.1, 0.2, ..., 0.7, 1, 2, ...., 7, 10, 20, .... :pre

This command

dump 0.1 snap.lattice logfreq 1 2.0 id i1 i2 x y z :pre

will dump snapshots at these times:

t = 0, 0.1, 0.2, 0.4, 0.8, 1.6, ... :pre

If no fields are listed, then the default output values for each site
are "id lattice x y z".  This is in the format of a "LAMMPS dump
file"_lammps which can thus be read-in by the "Pizza.py
toolkit"_pizza, converted to other formats, or used for visualization.
An important modification to the LAMMPS-style header for each snapshot
is the addition of real time to the line containing the snapshot
number:

ITEM: TIMESTEP TIME
100   3.23945

Setting the {mask} keyword to {yes} will suppress output for sites
whose energy is zero.  The reduced number of sites for that snapshot
will be reflected in the header line for the number of atoms/sites.

ITEM: NUMBER OF ATOMS
314159

If fields are listed, then only those quantities will be printed for
each lattice site.

The {id} is a unique integer ID for each site.

The {lattice} value is typically the integer state of the lattice,
e.g. the spin value, assuming the application uses the lattice array.
Some applications store multiple values per lattice site; see the
{site} option of the "app_style"_app_style.html command.  You can
specify these values be dumped as {iN} or {dN}, where i = integer, d =
double, and N = which value to print (1,2,3,...).

The {x}, {y}, {z} values are the coordinates assigned to the lattice
site.  The {energy} value is what is computed by the energy() function
in the application.  Likewise for the {propensity} value which can be
thought of as the relative probablity for that site to perform a KMC
event.  Note that if you are doing Metropolis MC and not kinetic MC,
no propensity is defined.

When running in parallel, the order of sites as printed to the dump
file will be in chunks by processor, not ordered by ID.  The order
will be the same in every snapshot.

:link(lammps,http://lammps.sandia.gov)
:link(pizza,http://www.cs.sandia.gov/~sjplimp/pizza.html)

[Restrictions:]

This command can only be used as part of the lattice-based
applications.  See the "app_style"_app_style.html command for further
details.

[Related commands:]

"dump_one"_dump_one.html, "stats"_stats.html

[Default:] none
