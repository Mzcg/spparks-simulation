"Previous Section"_Section_tools.html - "SPPARKS WWW Site"_sws -
"SPPARKS Documentation"_sd - "SPPARKS Commands"_sc - "Next
Section"_Section_errors.html :c

:link(sws,http://www.cs.sandia.gov/~sjplimp/spparks.html)
:link(sd,Manual.html)
:link(sc,Section_commands.html#comm)

:line

8. Modifying & extending SPPARKS :h3

SPPARKS is designed in a modular fashion so as to be easy to modify and
extend with new functionality.

In this section, changes and additions users can make are listed along
with minimal instructions.  If you add a new feature to SPPARKS and
think it will be of interest to general users, we encourage you to
submit it to the developers for inclusion in the released version of
SPPARKS.

The best way to add a new feature is to find a similar feature in
SPPARKS and look at the corresponding source and header files to figure
out what it does.  You will need some knowledge of C++ to be able to
understand the hi-level structure of SPPARKS and its class
organization, but functions (class methods) that do actual
computations are written in vanilla C-style code and operate on simple
C-style data structures (vectors and arrays).

Most of the new features described in this section require you to
write a new C++ derived class.  Creating a new class requires 2 files,
a source code file (*.cpp) and a header file (*.h).  The derived class
must provide certain methods to work as a new option.  Depending on
how different your new feature is compared to existing features, you
can either derive from the base class itself, or from a derived class
that already exists.  Enabling SPPARKS to invoke the new class is as
simple as adding two lines to the style_user.h file, in the same
syntax as other SPPARKS classes are specified in the style.h file.

The advantage of C++ and its object-orientation is that all the code
and variables needed to define the new feature are in the 2 files you
write, and thus shouldn't make the rest of SPPARKS more complex or
cause side-effect bugs.

Here is a concrete example.  Suppose you write 2 files app_foo.cpp and
app_foo.h that define a new class AppFoo that implements a Monte Carlo
model described in the classic 1997 "paper"_#Foo by Foo, et al.  If
you wish to invoke that application in a SPPARKS input script with a
command like

app_style foo 0.1 3.5 :pre

you put your 2 files in the SPPARKS src directory, add 2 lines to the
style_user.h file, and re-make the code.

The first line added to style_user.h would be

AppStyle(foo,AppFoo) :pre

in the #ifdef AppClass section, where "foo" is the style keyword in
the app_style command, and AppFoo is the class name in your C++ files.

The 2nd line added to style_user.h would be

#include "app_foo.h" :pre

in the #ifdef AppInclude section, where app_foo.h is the name of your
new include file.

When you re-make SPPARKS, your new application becomes part of the
executable and can be invoked with a app_style command like the
example above.  Arguments like 0.1 and 3.5 can be defined and
processed by your new class.

Here is a list of the new features that can be added in this way.

"Application styles"_#app
"Diagnostic styles"_#diag
"Input script commands"_#command
"Solve styles"_#solve
"Sweep styles"_#sweep :ul

As illustrated by the application example, these options are referred
to in the SPPARKS documentation as the "style" of a particular
command.

The instructions below give the header file for the base class that
these styles are derived from.  Public variables in that file are ones
used and set by the derived classes which are also used by the base
class.  Sometimes they are also used by the rest of SPPARKS.  Virtual
functions in the base class header file which are set = 0 are ones you
must define in your new derived class to give it the functionality
SPPARKS expects.  Virtual functions that are not set to 0 are functions
you can optionally define.

:line
:line

Application styles :link(app),h4

In SPPARKS, applications are what define the simulation model that is
evolved via Monte Carlo algorithms.  A new model typically requires
adding a new application to the code.  Read the doc page for the
"app_style"_app_style.html command to understand the distinction
between on-lattice and off-lattice applications.  A new off-lattice
application can be anything you wish.  On-lattice applications should
derive from the AppLattice (general lattice), AppLattice2d (2d square
lattice), of AppLattice3d (3d cubic lattice) classes.  The 2d and 3d
variants may disappear in the future as they are superceded by
AppLattice, so that style of application should be your default
choice.

For off-lattice applications, here is a brief description of methods
you define in your new derived class.  Some of them are required; some
are optional.  See app.h for details.

input: additional commands the application defines
init: setup the application
run: perform iterations or timestepping of the model
dump_header: write header of dump file
dump: write a snapshot of state of model
set_stats: setup application-specific statistics
set_dump: setup application-specific dump :tb(s=:)

For off-lattice applications, here is a brief description of methods
you define in your new derived class.  Some of them are required; some
are optional.  See app_lattice.h for details.

site_energy: compute energy of a lattice site
site_event_rejection: peform a Metropolis event with rejection
site_propensity: compute propensity of all events on a site
site_event: perform a kinetic Monte Carlo event
input_app: perform application-specific input
init_app: perform application-specific initialization :tb(s=:)

:line

Diagnostic styles :link(diag),h4

Diagnostic classes compute some form of analysis periodically during a
simulation.  See the "diag_style"_diag_style.html command for details.

To add a new diagnostic, here is a brief description of methods you
define in your new derived class.  Some of them are required; some are
optional.  See diag.h for details.

init: setup the computation
compute: perform the analysis computation
stats_header: what to add to statistics header for this diagnostic
stats: fields added to statistics by this diagnostic :tb(s=:)

:line

Input script commands :link(command),h4

New commands can be added to SPPARKS input scripts by adding new
classes that have a "command" method and are listed in the Command
sections of style_user.h (or style.h).  For example, the shell
commands (cd, mkdir, rm, etc) are implemented in this fashion.  When
such a command is encountered in the SPPARKS input script, SPPARKS
simply creates a class with the corresponding name, invokes the
"command" method of the class, and passes it the arguments from the
input script.  The command method can perform whatever operations it
wishes on SPPARKS data structures.

The single method your new class must define is as follows:

command: operations performed by the new command :tb(s=:)

Of course, the new class can define other methods and variables as
needed.

:line

Solve styles :link(solve),h4

In SPPARKS, a solver performs the kinetic Monte Carlo (KMC) operation
of selecting an event from a list of events and associated
probabilities.  See the "solve_style"_solve_style.html command for
details.

To add a new KMC solver, here is a brief description of methods you
define in your new derived class.  Some of them are required; some are
optional.  See diag.h for details.

Here is a brief description of methods you define in your new derived
class.  All of them are required.  See solve.h for details.

clone: make a copy of the solver for use within a sector of the domain
init: initialize the solver
update: update one or more event probabilities
resize: change the number of events in the list
event: select an event and associated timestep :tb(s=:)

:line

Sweep styles :link(sweep),h4

In SPPARKS, a sweep performs Metropolis Monte Carlo or kinetic Monte
Carlo operations on a series of lattice sites for on-lattice
applications.  See the "sweep_style"_sweep_style.html command for
details.  See the "app_style"_app_style.html command for info on
on-lattice applications.

There are 3 sweep classes that support the various kinds of lattices
used by applications: SweepLattice for general lattices,
SweepLattice2d for 2d square lattices, and SweepLattice3d for 3d cubic
lattices.

Each of these sweep classes has lo-level functions defined for various
kinds of sweeping: vanilla sweeping, with masking, with coloring for
strict sweeping, etc.  New functions could be added to any of the
these 3 classes for alternate sweeping strategies that could then be
called by the top-level of the sweeper.

See the sweep_lattice.h, sweep_lattice2d.h, and sweep_lattice3d.h
files for details.

:line
:line

:link(Foo)
[(Foo)] Foo, Morefoo, and Maxfoo, J of Classic Monte Carlo
Applications, 75, 345 (1997).
